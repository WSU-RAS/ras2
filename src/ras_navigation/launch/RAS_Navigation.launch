<!-- Starts the RAS navigation system--> 

<launch>

  <!-- These can be run seperatly, put here for all-in-one launch file -->
  <include file="$(find turtlebot3_bringup)/launch/turtlebot3_robot.launch"/>
  <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch"/>


  <!-- Add GSUR code for better nav here -->
  

  <!-- Default map path and name -->
  <arg name="map_path" default="$(find ras_navigation)/Data/"/>
  <arg name="map_name" default="\casas.pbstream"/>


  <!-- Bool variable used for deciding whether to create a new map -->
  <arg name="new_map" default="false"/>


  <!-- Show the RViz GUI -->
  <arg name="gui" default="false"/>


  <!-- The main cartographer_node, it creates a link for map->odom and provides odom data-->
  <group if="$(eval new_map == true)">
    <node name="cartographer_node" pkg="cartographer_ros"
        type="cartographer_node" args="
            -configuration_directory $(find ras_navigation)/params/cartographer_params
            -configuration_basename init_RAS_cartographer_params.lua">
    </node>
  </group>

  <group if="$(eval new_map == false)">
    <node name="cartographer_node" pkg="cartographer_ros"
        type="cartographer_node" args="
            -configuration_directory $(find ras_navigation)/params/cartographer_params
            -configuration_basename RAS_cartographer_params.lua
            -load_state_filename $(arg map_path)$(arg map_name)">
    </node>
  </group>

  <!-- This node acctually sends out the occupancy grid for map topic-->
  <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
type="cartographer_occupancy_grid_node" args="-resolution 0.05" />

  <!-- This is just to view what is happening, good for debugging whats not working -->
  <group if="$(eval gui == true)">
    <node name="rviz" pkg="rviz" type="rviz" required="true"
       args="-d $(find ras_navigation)/params/rviz/demo_3d.rviz"/>
  </group>


  <!-- Move base -->
  <!-- Derivative of work found in /opt/ros/kinetic/share/turtlebot_navigation/launch/move_base.launch.xml-->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base">
  
    <rosparam file="$(find ras_navigation)/params/costmap_params/costmap_common_params_waffle.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find ras_navigation)/params/costmap_params/costmap_common_params_waffle.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find ras_navigation)/params/costmap_params/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find ras_navigation)/params/costmap_params/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find ras_navigation)/params/move_base_params/move_base_params.yaml" command="load" />
    <rosparam file="$(find ras_navigation)/params/move_base_params/dwa_local_planner_params.yaml" command="load" />
  
  </node>


  <!-- Laser Filter -->
  <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="laser_filter">
    <rosparam command="load" file="$(find ras_navigation)/params/filters/my_laser_config.yaml" />
  </node>


  <!-- Used to save maps from our cartographer mapping node output -->
  <group if="$(eval new_map == true)">
      <node pkg="ras_navigation" name="save_map" type="saveMap.py">
        <param name="filename" value="$(arg map_name)"/>
        <param name="path" value="$(arg map_path)"/>
      </node>
  </group>

</launch>
