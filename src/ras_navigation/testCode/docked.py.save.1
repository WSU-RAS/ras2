#!/usr/bin/env python
import rospy
import math
import time

#Include data structure for handling map
from turtlebot3_msgs.msg import SensorState
from ras_msgs.srv import Goto_xy
import dynamic_reconfigure.client
import csv



time = 0

class Dock:

	def __init__(self): #sets variables to be referenced later in the class
		self.data = None #sets variable of self.data up
		self.start_time = time.time() #when class initialized, time will start.
		self.loop_time = time.time() 
		self.t1 = 3 #sets time variables. 
		self.t2 = 20 #time until robot re-sets to docking posion
		self.t3 = 120 #time until robot aborts entirely
		self.x1 = 1.0 #sets pre-docking positions
		self.y1 = 1.0
		self.w1 = 1.0 #orientation
		self.z1 = 0
		self.x2 = 1 #sets where the docking position is
		self.y2 = 1
		self.succeed = False #priming variable

	def callback(data): #pulls in data and assigns it in parallel
		self.data = data

	def nav_to_dock():
		rospy.wait_for_service('Goto_xy') #waits until Goto_xy function is up

		nav = rospy.serviceProxy('Goto_xy', Goto_xy) #sets nav as funtion Goto_xy defined elsewhere?
		nav_results = nav(x, y) #inputs xy coordinates into nav, into Goto_xy and carries out

	def finesse_nav():
		recon = dynamic_reconfigure.client.Client('move_base') #reconfigures node from  dynamic
		config = client.update_configuration({}) #gets current configuration without changes for future reference
		params =  {'max_vel_x': 0.05, 'max_trans_vel': 0.05, 'accel_lim_x': 0.5, 'xy_goal_tolerance': 0.025} #sets max velocities/acceleration low and goal tolerance to radius of 1 inch
		recon.update_configuration(params) #updates recon with above
		nav = rospy.servieProxy('Goto_xy', Goto_xy)
		nav_results = nav(x, y) #sends to final destination
		recon.update_configuration(config) #resets parameters

	def connect():
		rospy.Subscriber('/sensor_state', SensorState, callback) #subscribes to sensor state, calls sensor state in
		self.loop_time = time.time()
		while not self.succeed and self.t2 => time.time() - self.loop_time and self.t3 => time.time() - self.start_time: 
			check_voltage()
			wiggle()
			check_voltage()
		if self.succeed:
			return "we have docked"
		if 

		if self.t2 => time.time() - self.loop_tim

	def check_voltage():
		if self.data.battery > 11.8: #checks if voltage is above 11.8. theoretically this means its charging
			self.succeed = True
		time.sleep(self.t1) #waits for period of time
		if self.data.battery > 11.8: #checks if voltage is above 11.8. theoretically this means its charging
			self.succeed = True


	def wiggle(): #will make the robot wiggle in the future
		return None


def listener():
	rospy.init_node('docking_service', anonymous=True) #creates a node the file (only 1 per file needed)

	while not rospy.is_shutdown(): #basically has check every results 10 seconds
		rospy.sleep(10)


if __name__ == '__main__': #main body of the function. starts everything going
	listener()
